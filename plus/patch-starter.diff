Index: src/main/java/net/butfly/bus/start/JettyStarter.java
===================================================================
--- src/main/java/net/butfly/bus/start/JettyStarter.java	(revision 701)
+++ src/main/java/net/butfly/bus/start/JettyStarter.java	(working copy)
@@ -1,28 +1,15 @@
 package net.butfly.bus.start;
 
-import java.io.PrintWriter;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Modifier;
 import java.util.Map;
-import java.util.Set;
 
-import javax.naming.NamingException;
-
 import net.butfly.albacore.utils.Reflections;
-import net.butfly.albacore.utils.async.Task;
-import net.butfly.albacore.utils.more.JNDIUtils;
 import net.butfly.bus.impl.BusServlet;
 import net.butfly.bus.impl.ServletInitParams;
-import net.butfly.bus.impl.WebServiceServlet;
 
-import org.apache.commons.cli.CommandLine;
-import org.apache.commons.cli.CommandLineParser;
-import org.apache.commons.cli.HelpFormatter;
-import org.apache.commons.cli.Options;
-import org.apache.commons.cli.ParseException;
-import org.apache.commons.cli.PosixParser;
 import org.eclipse.jetty.http.spi.DelegatingThreadPool;
 import org.eclipse.jetty.server.Connector;
 import org.eclipse.jetty.server.Handler;
@@ -42,30 +29,15 @@
 import org.eclipse.jetty.servlet.ServletContextHandler;
 import org.eclipse.jetty.servlet.ServletHolder;
 import org.eclipse.jetty.util.ssl.SslContextFactory;
-import org.eclipse.jetty.util.thread.QueuedThreadPool;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
-public class JettyStarter implements Runnable {
-	protected final static Logger logger = LoggerFactory.getLogger(JettyStarter.class);
+public class JettyStarter extends Starter {
 	protected final int BUF_SIZE = 8 * 1024;
-	protected final static String DEFAULT_CONTEXT_PATH = "/bus/*";
-	protected final static int DEFAULT_PORT = 19080;
-	protected final static int DEFAULT_SECURE_PORT = 19443;
-	protected final static int DEFAULT_THREAD_POOL_SIZE = -1;
-	private static final long DEFAULT_IDLE = 60000;
 	protected final Server server;
 	protected final ServletContextHandler context;
-	protected boolean running = false;
 
-	public JettyStarter() {
-		this(new StarterConfiguration(false));
-	}
-
 	public JettyStarter(StarterConfiguration conf) {
-		if (conf.threads > 0) this.server = new Server(new QueuedThreadPool(conf.threads));
-		else if (conf.threads == 0) this.server = new Server(new DelegatingThreadPool(Task.getDefaultExecutor()));
-		else this.server = new Server();
+		super(conf);
+		this.server = new Server(new DelegatingThreadPool(this.executor));
 		this.context = new ServletContextHandler(ServletContextHandler.SESSIONS);
 		this.context.setContextPath("/");
 		if (null != conf.resBase) context.setResourceBase(conf.resBase);
@@ -76,17 +48,12 @@
 
 	}
 
-	public void run(boolean fork) {
-		if (fork) {
-			Thread th = new Thread(this);
-			th.setDaemon(true);
-			th.setName("StandardBus-Server-Jetty-Starter-Thread");
-			th.start();
-		} else this.run();
+	public static void main(String... args) throws Exception {
+		start(JettyStarter.class, args);
 	}
 
 	@Override
-	public void run() {
+	protected void run() {
 		try {
 			logger.trace("Jetty starting...");
 			server.start();
@@ -94,7 +61,6 @@
 			logger.trace("Jetty started.");
 		} catch (Exception e) {
 			logger.error("Jetty starting failure: ", e);
-			running = false;
 			throw new RuntimeException(e);
 		}
 	}
@@ -108,7 +74,8 @@
 		}
 	}
 
-	public JettyStarter addBusInstances(StarterConfiguration conf) throws IllegalAccessException, IllegalArgumentException,
+	@Override
+	protected JettyStarter addBusInstances(StarterConfiguration conf) throws IllegalAccessException, IllegalArgumentException,
 			InvocationTargetException {
 		if (conf.config == null || conf.config.length == 0) this.addBusInstance(conf.servletClass, null, conf.context);
 		else if (conf.config.length == 1) this.addBusInstance(conf.servletClass, conf.config[0], conf.context);
@@ -137,13 +104,6 @@
 		context.addServlet(servlet, contextPath);
 	}
 
-	private static Class<? extends BusServlet> scanServletClass() {
-		Set<Class<? extends BusServlet>> classes = Reflections.getSubClasses(BusServlet.class);
-		for (Class<? extends BusServlet> c : classes)
-			if (!c.getName().startsWith("net.butfly.bus.")) return c;
-		return WebServiceServlet.class;
-	}
-
 	protected void createServer(int port) {
 		HttpConfiguration conf = new HttpConfiguration();
 		conf.setSecureScheme("http");
@@ -212,150 +172,8 @@
 		server.setHandler(handlers);
 	}
 
-	public static void main(String... args) throws Exception {
-		StarterParser parser = new StarterParser(PosixParser.class);
-		CommandLine cmd = parser.parse(args);
-		if (null != cmd) {
-			StarterConfiguration conf = new StarterConfiguration(cmd);
-			logger.info(conf.toString());
-
-			JettyStarter j = new JettyStarter(conf);
-			j.addBusInstances(conf);
-			if (null != conf.jndi) addJNDI(conf.jndi);
-			j.run(conf.fork);
-		}
-	}
-
 	public boolean starting() {
 		return this.server.isStarting();
 	}
 
-	private static class StarterParser {
-		private CommandLineParser parser;
-		private Options options;
-
-		public StarterParser(Class<? extends CommandLineParser> parserClass) {
-			try {
-				this.parser = parserClass.newInstance();
-			} catch (Exception e) {
-				throw new RuntimeException(e);
-			}
-			options = new Options();
-			this.options();
-		}
-
-		private void options() {
-			options.addOption("s", "secure", false, "If presented, bus server will open https service (secure service).");
-			options.addOption("k", "fork", false,
-					"If presented, bus server will run in a forked threads (not daemon, the server will be stopped on main threads stopping)");
-
-			options.addOption("h", "help", false, "Print help for command line sterter of bus server");
-		}
-
-		public CommandLine parse(String[] args) throws ParseException {
-			CommandLine cmd = this.parser.parse(this.options, args, true);
-			if (cmd.hasOption('h')) {
-				PrintWriter pw = new PrintWriter(System.out);
-				HelpFormatter f = new HelpFormatter();
-				f.setWidth(94);
-				int width = f.getWidth();
-				String className = Thread.currentThread().getStackTrace()[2].getClassName();
-				f.printUsage(pw, width, "java " + className + " [OPTION] [CONFIG_FILE ...]");
-				f.printWrapped(pw, width, "Start bus server(s) with CONFIG_FILE(s) (default bus.xml in root of classpath).");
-
-				this.printWrapped(f, pw, "Example", "java -Dbus.jndi=context.xml " + className + " -k bus-server.xml");
-				this.printWrapped(f, pw, "Example", "java -Dbus.jndi=context.xml " + className
-						+ " -k bus-server1.xml:path1 bus-server2.xml:path2");
-				this.printWrapped(f, pw, "ContinuousOptions", null);
-				f.printOptions(pw, width, options, f.getLeftPadding(), f.getDescPadding());
-				this.printWrapped(f, pw, "Environment variables", null);
-				this.printWrapped(f, pw, "bus.port", "Port of bus server (default " + DEFAULT_PORT + ")");
-				this.printWrapped(f, pw, "bus.port.secure", "Secure port of bus server (default " + DEFAULT_SECURE_PORT + ")");
-				this.printWrapped(f, pw, "bus.threadpool.size", "Thread pool size of bus server (default "
-						+ DEFAULT_THREAD_POOL_SIZE + ", -1 for no threads pool)");
-				this.printWrapped(f, pw, "bus.server.context", "Context path of bus server (default " + DEFAULT_CONTEXT_PATH
-						+ "), only used on one argument being defined.");
-				this.printWrapped(f, pw, "bus.jndi", "Jndi context definition file (default no jndi resource attached)");
-				this.printWrapped(f, pw, "bus.server.base",
-						"Static resource root for bus server, such as index.html (default none)");
-				this.printWrapped(f, pw, "bus.servlet.class",
-						"Class name for the servlet of container of bus deployment (default net.butfly.bus.start.WebServiceServlet)");
-				pw.flush();
-				return null;
-			} else return cmd;
-		}
-
-		private void printWrapped(final HelpFormatter f, final PrintWriter pw, String prefix, String desc) {
-			prefix = prefix + ": ";
-			if (desc != null) prefix = prefix + "\n\t" + desc;
-			f.printWrapped(pw, f.getWidth(), 8, prefix);
-		}
-	}
-
-	private static final class StarterConfiguration {
-		private boolean secure;
-		private int port;
-		private int sslPort;
-		private String resBase;
-		private int threads;
-		private boolean fork;
-		private String jndi;
-		private String[] config;
-		private Class<? extends BusServlet> servletClass;
-		private String context;
-
-		public StarterConfiguration(CommandLine cmd) {
-			this.config = cmd.getArgs();
-			this.secure = cmd.hasOption('s');
-			this.fork = cmd.hasOption('k');
-			this.loadSystemProperties();
-		}
-
-		public StarterConfiguration(boolean fork, String... config) {
-			this.config = config;
-			this.fork = fork;
-			this.loadSystemProperties();
-		}
-
-		@SuppressWarnings("unchecked")
-		private void loadSystemProperties() {
-			this.port = Integer.getInteger("bus.port", DEFAULT_PORT);
-			this.sslPort = Integer.getInteger("bus.port.secure", DEFAULT_SECURE_PORT);
-			this.threads = Integer.getInteger("bus.threadpool.size", DEFAULT_THREAD_POOL_SIZE);
-			this.context = System.getProperty("bus.server.context", DEFAULT_CONTEXT_PATH);
-			this.jndi = System.getProperty("bus.jndi");
-			this.resBase = System.getProperty("bus.server.base");
-
-			try {
-				this.servletClass = (Class<? extends BusServlet>) Class.forName(System.getProperty("bus.servlet.class"));
-			} catch (Throwable t) {
-				this.servletClass = scanServletClass();
-			}
-		}
-
-		@Override
-		public String toString() {
-			StringBuilder sb = new StringBuilder("Start configuration:\n");
-			for (Field f : this.getClass().getDeclaredFields())
-				if (f.getType().isArray()) {
-					sb.append("\t").append(f.getName()).append(": \n");
-					try {
-						for (Object e : (Object[]) f.get(this))
-							sb.append("\t\t").append(e).append("\n");
-					} catch (IllegalAccessException e) {}
-				} else try {
-					sb.append("\t").append(f.getName()).append(": ").append((Object) f.get(this)).append("\n");
-				} catch (IllegalAccessException e) {}
-			return sb.toString();
-		}
-	}
-
-	public static void addJNDI(String contextXml) {
-		try {
-			JNDIUtils.bindContext("java:comp/env/", contextXml);
-		} catch (NamingException e) {
-			throw new RuntimeException("Failure in JNDI process", e);
-		}
-	}
-
 }
\ No newline at end of file
Index: src/main/java/net/butfly/bus/start/Starter.java
===================================================================
--- src/main/java/net/butfly/bus/start/Starter.java	(revision 0)
+++ src/main/java/net/butfly/bus/start/Starter.java	(working copy)
@@ -0,0 +1,210 @@
+package net.butfly.bus.start;
+
+import java.io.PrintWriter;
+import java.lang.reflect.Field;
+import java.lang.reflect.InvocationTargetException;
+import java.util.Set;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
+import javax.naming.NamingException;
+
+import net.butfly.albacore.utils.Reflections;
+import net.butfly.albacore.utils.more.JNDIUtils;
+import net.butfly.bus.impl.BusServlet;
+import net.butfly.bus.impl.WebServiceServlet;
+
+import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.CommandLineParser;
+import org.apache.commons.cli.HelpFormatter;
+import org.apache.commons.cli.Options;
+import org.apache.commons.cli.ParseException;
+import org.apache.commons.cli.PosixParser;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public abstract class Starter {
+	protected final static Logger logger = LoggerFactory.getLogger(Starter.class);
+	protected static final long DEFAULT_IDLE = 60000;
+	private final static int DEFAULT_THREAD_POOL_SIZE = -1;
+	private final static int DEFAULT_PORT = 19080;
+	private final static String DEFAULT_CONTEXT_PATH = "/bus/*";
+	private final static int DEFAULT_SECURE_PORT = 19443;
+	protected ExecutorService executor;
+
+	protected static void start(Class<? extends Starter> starterClass, String... args) throws Exception {
+		StarterParser parser = new StarterParser(PosixParser.class);
+		CommandLine cmd = parser.parse(args);
+		if (null != cmd) {
+			StarterConfiguration conf = new StarterConfiguration(cmd);
+			logger.info(conf.toString());
+			Starter j = Reflections.construct(starterClass, Reflections.parameter(conf));
+			j.addBusInstances(conf);
+			if (null != conf.jndi) addJNDI(conf.jndi);
+			j.run(conf.fork);
+		}
+	}
+
+	public Starter(StarterConfiguration conf) {
+		if (conf.threads > 0) this.executor = Executors.newFixedThreadPool(conf.threads);
+		else if (conf.threads == 0) this.executor = Executors.newCachedThreadPool();
+	}
+
+	protected abstract JettyStarter addBusInstances(StarterConfiguration conf) throws IllegalAccessException,
+			IllegalArgumentException, InvocationTargetException;
+
+	public static void addJNDI(String contextXml) {
+		try {
+			JNDIUtils.bindContext("java:comp/env/", contextXml);
+		} catch (NamingException e) {
+			throw new RuntimeException("Failure in JNDI process", e);
+		}
+	}
+
+	protected static Class<? extends BusServlet> scanServletClass() {
+		Set<Class<? extends BusServlet>> classes = Reflections.getSubClasses(BusServlet.class);
+		for (Class<? extends BusServlet> c : classes)
+			if (!c.getName().startsWith("net.butfly.bus.")) return c;
+		return WebServiceServlet.class;
+	}
+
+	private void run(boolean fork) {
+		if (fork) {
+			Thread th = new Thread(new Runnable() {
+				@Override
+				public void run() {
+					run();
+				}
+			});
+			th.setDaemon(true);
+			th.setName("StandardBus-Server-Jetty-Starter-Thread");
+			th.start();
+		} else this.run();
+	}
+
+	protected abstract void run();
+
+	protected static class StarterParser {
+		private CommandLineParser parser;
+		private Options options;
+
+		public StarterParser(Class<? extends CommandLineParser> parserClass) {
+			try {
+				this.parser = parserClass.newInstance();
+			} catch (Exception e) {
+				throw new RuntimeException(e);
+			}
+			options = new Options();
+			this.options();
+		}
+
+		private void options() {
+			options.addOption("s", "secure", false, "If presented, bus server will open https service (secure service).");
+			options.addOption("k", "fork", false,
+					"If presented, bus server will run in a forked threads (not daemon, the server will be stopped on main threads stopping)");
+
+			options.addOption("h", "help", false, "Print help for command line sterter of bus server");
+		}
+
+		public CommandLine parse(String[] args) throws ParseException {
+			CommandLine cmd = this.parser.parse(this.options, args, true);
+			if (cmd.hasOption('h')) {
+				printHelper();
+				return null;
+			} else return cmd;
+		}
+
+		private void printHelper() {
+			PrintWriter pw = new PrintWriter(System.out);
+			HelpFormatter f = new HelpFormatter();
+			f.setWidth(94);
+			int width = f.getWidth();
+			String className = Thread.currentThread().getStackTrace()[2].getClassName();
+			f.printUsage(pw, width, "java " + className + " [OPTION] [CONFIG_FILE ...]");
+			f.printWrapped(pw, width, "Start bus server(s) with CONFIG_FILE(s) (default bus.xml in root of classpath).");
+
+			this.printWrapped(f, pw, "Example", "java -Dbus.jndi=context.xml " + className + " -k bus-server.xml");
+			this.printWrapped(f, pw, "Example", "java -Dbus.jndi=context.xml " + className
+					+ " -k bus-server1.xml:path1 bus-server2.xml:path2");
+			this.printWrapped(f, pw, "ContinuousOptions", null);
+			f.printOptions(pw, width, options, f.getLeftPadding(), f.getDescPadding());
+			this.printWrapped(f, pw, "Environment variables", null);
+			this.printWrapped(f, pw, "bus.port", "Port of bus server (default " + DEFAULT_PORT + ")");
+			this.printWrapped(f, pw, "bus.port.secure", "Secure port of bus server (default " + DEFAULT_SECURE_PORT + ")");
+			this.printWrapped(f, pw, "bus.threadpool.size", "Thread pool size of bus server (default "
+					+ DEFAULT_THREAD_POOL_SIZE + ", -1 for no threads pool)");
+			this.printWrapped(f, pw, "bus.server.context", "Context path of bus server (default " + DEFAULT_CONTEXT_PATH
+					+ "), only used on one argument being defined.");
+			this.printWrapped(f, pw, "bus.jndi", "Jndi context definition file (default no jndi resource attached)");
+			this.printWrapped(f, pw, "bus.server.base",
+					"Static resource root for bus server, such as index.html (default none)");
+			this.printWrapped(f, pw, "bus.servlet.class",
+					"Class name for the servlet of container of bus deployment (default net.butfly.bus.start.WebServiceServlet)");
+			pw.flush();
+		}
+
+		private void printWrapped(final HelpFormatter f, final PrintWriter pw, String prefix, String desc) {
+			prefix = prefix + ": ";
+			if (desc != null) prefix = prefix + "\n\t" + desc;
+			f.printWrapped(pw, f.getWidth(), 8, prefix);
+		}
+	}
+
+	protected static final class StarterConfiguration {
+		protected boolean secure;
+		protected int port;
+		protected int sslPort;
+		protected String resBase;
+		protected int threads;
+		protected boolean fork;
+		protected String jndi;
+		protected String[] config;
+		protected Class<? extends BusServlet> servletClass;
+		protected String context;
+
+		public StarterConfiguration(CommandLine cmd) {
+			this.config = cmd.getArgs();
+			this.secure = cmd.hasOption('s');
+			this.fork = cmd.hasOption('k');
+			this.loadSystemProperties();
+		}
+
+		public StarterConfiguration(boolean fork, String... config) {
+			this.config = config;
+			this.fork = fork;
+			this.loadSystemProperties();
+		}
+
+		@SuppressWarnings("unchecked")
+		private void loadSystemProperties() {
+			this.port = Integer.getInteger("bus.port", DEFAULT_PORT);
+			this.sslPort = Integer.getInteger("bus.port.secure", DEFAULT_SECURE_PORT);
+			this.threads = Integer.getInteger("bus.threadpool.size", DEFAULT_THREAD_POOL_SIZE);
+			this.context = System.getProperty("bus.server.context", DEFAULT_CONTEXT_PATH);
+			this.jndi = System.getProperty("bus.jndi");
+			this.resBase = System.getProperty("bus.server.base");
+
+			try {
+				this.servletClass = (Class<? extends BusServlet>) Class.forName(System.getProperty("bus.servlet.class"));
+			} catch (Throwable t) {
+				this.servletClass = scanServletClass();
+			}
+		}
+
+		@Override
+		public String toString() {
+			StringBuilder sb = new StringBuilder("Start configuration:\n");
+			for (Field f : this.getClass().getDeclaredFields())
+				if (f.getType().isArray()) {
+					sb.append("\t").append(f.getName()).append(": \n");
+					try {
+						for (Object e : (Object[]) f.get(this))
+							sb.append("\t\t").append(e).append("\n");
+					} catch (IllegalAccessException e) {}
+				} else try {
+					sb.append("\t").append(f.getName()).append(": ").append((Object) f.get(this)).append("\n");
+				} catch (IllegalAccessException e) {}
+			return sb.toString();
+		}
+	}
+}
